namespace com.ibm.streamsx.bytes.sample;

use com.ibm.streamsx.bytes.transformation::*;

composite Transformation {
	graph
	/*
		Hex			Dec			Bin
		---			---			---
		4702		18178		0100 0111 0000 0010
		0247		583			0000 0010 0100 0111 (ROL 8)
		2470		9328		0010 0100 0111 0000 (ROR 4) 
	 */
		stream<uint64 number> Number =Beacon(){
			param
				iterations:1u;
			output
				Number : number=18178ul;
		}
		stream<Number,tuple<rstring binInt,rstring binUInt,uint64 uintFromBin, rstring rotateLeft,rstring rotateRight,uint64 uintFromBinROL,uint64 uintFromBinROR>> Transform=Custom(Number){
			logic
				onTuple Number:{
					mutable Transform _tuple={};
					assignFrom(_tuple,Number);
					_tuple.binInt=getBitStringFromInt((int64)number);
					_tuple.binUInt=getBitStringFromUnsignedInt((uint64)number);
					_tuple.uintFromBin=getUnsignedIntFromBinaryString(_tuple.binUInt);
					_tuple.rotateLeft=rotateLeft(_tuple.binInt,8ub);
					_tuple.rotateRight=rotateRight(_tuple.binInt,4ub);
					_tuple.uintFromBinROL=getUnsignedIntFromBinaryString(_tuple.rotateLeft);
					_tuple.uintFromBinROR=getUnsignedIntFromBinaryString(_tuple.rotateRight);
					submit(_tuple,Transform);
				}
		}
		() as display=FileSink(Transform){
			param
				file:"/dev/stdout";
				flush:1u;
				writePunctuations:false;
		}
}
