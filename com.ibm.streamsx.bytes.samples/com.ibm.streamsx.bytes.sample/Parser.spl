namespace com.ibm.streamsx.bytes.sample;
use com.ibm.streamsx.bytes::*;

composite Parser {
	param
		expression<int32> $word :(int32) getSubmissionTimeValue("word","128") ;
		expression<int32> $byte :(int32) getSubmissionTimeValue("byte","12") ;
		expression<list<rstring>> $delimiters : tokenize(getSubmissionTimeValue("delimiters","4702,B805,470A,B80D"), ",", false) ;

	type
		ExtractedParameter=	rstring frameName
								,uint8 subFrameIndex
								,rstring subFrameName
									,rstring packetName
									,rstring packetDescription
									,rstring packetFormat
									,float64 packetFactor
									,float64 packetOffset
									,float64 packetLimit
									,rstring packetUnit
									,rstring packetBinaryString
									;


	graph
		/*
		 * Read data from file
		 */
		stream<blob message> Input=FileSource(){
			param
				file:"example.dat";
				format:block;
				blockSize:(uint32)$word * 16u;
//				initDelay:5fl;
		}

		stream<Input> StartingFrame=Custom(Input){
			logic
				state:{
//					list<rstring> delim=["4702","B805","470A","B80D"];
					mutable boolean stop=false;
					mutable uint64 count=0;
				}
				onTuple Input:{
						if(!stop){
							submit(Input,StartingFrame);
							 count++;
							 if(count < 0ul){
							 	stop=true;
//							 	spl.utility::block(1.2);
							 }
						}
				}
				onPunct Input:{
					/*
 					 * Forward Punctuation
					 */
					if (currentPunct() == Sys.WindowMarker)         
						submit(Sys.WindowMarker, StartingFrame);
				}
		}
		
		stream<StartingFrame,ExtractedParameter> Decoded=BytesParser(StartingFrame){
			param
				file:"/home/jchailloux/git/streamsx.bytes/com.ibm.streamsx.bytes.samples/data/binary.json";	//Definition file
//				file:"./data/l10247ea.csv";
				frame:message;			//Attribute that contains the list of subFrames
//				word:128;				//words per subFrame
//				byte:12;				//size of the the word in bits
		}
		stream<Decoded,tuple<float64 result>> Convert=Functor(Decoded){
			output
				Convert:result=(float64)com.ibm.streamsx.bytes.transformation::getValueFromBinaryString(packetBinaryString,packetFormat,packetFactor,packetOffset,packetLimit);
		}
		() as Display=FileSink(Convert as Out){
			param
				file:"out.txt";
				flush:1u;
				writePunctuations:true;
		}

}
