namespace com.ibm.streamsx.bytes.sample;

use com.ibm.streamsx.bytes.conversion::*;

/*
	 *			ASCII					:		Base64 									:		Hex
	 * 
	 * 1								:		MQ==									:		31
	 * 22								:		MjI=									:		3232
	 * 333								:		MzMz									:		333333
	 * 4444								:		NDQ0NA==								:		34343434
	 * 55555							:		NTU1NTU=								:		3535353535
	 * 0123456789						:		MDEyMzQ1Njc4OQ==						:		30313233343536373839
	 * 12345.67890						:		MTIzNDUuNjc4OTA=						:		31323334352E3637383930
	 * A								:		QQ==									:		41
	 * ABCDEFGHIJKLMNOPQRSTUVWXYZ		:		QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo=	:		4142434445464748494A4B4C4D4E4F505152535455565758595A
	 * abchedfhijklmnopqrstuvwxyz		:		YWJjaGVkZmhpamtsbW5vcHFyc3R1dnd4eXo=	:		6162636865646668696A6B6C6D6E6F707172737475767778797A
 */

composite Conversion {
	param
		expression<list<rstring>> $ascii : ["1","22","333","4444","55555","0123456789","12345.67890","IBM","ABCDEFGHIJKLMNOPQRSTUVWXYZ","abchedfhijklmnopqrstuvwxyz"] ;
//		expression<list<rstring>> $ascii : ["MQ==","MjI=","MzMz","NDQ0NA==","NTU1NTU=","MDEyMzQ1Njc4OQ==","MTIzNDUuNjc4OTA=","QQ==","QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo=","YWJjaGVkZmhpamtsbW5vcHFyc3R1dnd4eXo="] ;
	graph
		/*
		 * Produce 1 tuple every <period> seconds randomly
		 */
		stream<rstring ascii>	ASCII=Beacon(){
			param
				period:1f;
			output
				ASCII:ascii=$ascii[(int32)(random() *(float64) size($ascii))];
		}

		/*
		 * Encode Functions
		 */
		stream<rstring ascii,rstring encodedBase64>	Encode=Custom(ASCII){
			logic
				onTuple ASCII:{
					submit({ascii=ascii,encodedBase64=encodeBase64(ascii)},Encode);
				}
		}

		/*
		 * Decode Functions
		 */
		stream<rstring ascii,rstring encodedBase64,rstring decodedBase64>	Decode=Custom(Encode){
			logic
				onTuple Encode:{
					mutable Decode _tuple={};
					assignFrom(_tuple,Encode);
					_tuple.decodedBase64=decodeBase64(encodedBase64);
					submit(_tuple,Decode);
				}
		}

		/*
		 * Convert Functions
		 */
		stream<rstring ascii,rstring encodedBase64,rstring decodedBase64,rstring hex,rstring asciiFromHex,rstring bin,rstring asciiFromBin,rstring binFromHex,rstring hexFromBin>	Convert=Custom(Decode){
			logic
				onTuple Decode:{
					mutable Convert _tuple={};
					assignFrom(_tuple,Decode);
					_tuple.hex=convertFromASCIIToHex(ascii);
					_tuple.asciiFromHex=convertFromHexToASCII(_tuple.hex);
					_tuple.bin=convertFromASCIIToBinary(ascii);
					_tuple.asciiFromBin=convertFromBinaryToASCII(_tuple.bin);
					_tuple.binFromHex=convertFromHexToBinary(_tuple.hex);
					_tuple.hexFromBin=convertFromBinaryToHex(_tuple.binFromHex);
					submit(_tuple,Convert);
				}
		}

		
		/*
		 * Write to the special file /dev/stdout (Console)
		 */
		() as Display=FileSink(Convert){
			param
				file:"/dev/stdout";
				flush:1u;
		}
}
